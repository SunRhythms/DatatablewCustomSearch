using DatatablePlugin;
using DatatablePlugin.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Linq.Dynamic;


public class HomeController : Controller
{
    string _sortOrder = string.Empty;
    string _sortBy = string.Empty;
    string _searchKeywords = string.Empty;
    int _startRow;
    int _rowLength;
    private readonly Context _context = new Context();
    public ActionResult Index()
    {
        return View();
    }

    public ActionResult AjaxHandler(JQueryDataTableParamModel param)
    {
        //jQuery datatables param
        var nameFilter = Convert.ToString(Request["sSearch_0"]);
        var priceFilter = Convert.ToString(Request["sSearch_1"]);
        var statusFilter = Convert.ToString(Request["sSearch_2"]);
        var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
        string sortDirection = Convert.ToString(Request["sSortDir_0"]); // asc or desc
        int TotalRecords;

        switch (Convert.ToInt32(sortColumnIndex))
        {
            case 0:
                _sortBy = "Name";
                break;
            case 1:
                _sortBy = "Name";
                break;

                //case 3:
                //    _sortBy = "IsActive";
                //    break;
        }
        _sortOrder = sortDirection;
        _rowLength = param.iDisplayLength;
        _startRow = param.iDisplayStart;
        _searchKeywords = param.sSearch;
        //int recordsTotal = 0;
        //var displayedPosts = null;

        
        
        var v = (from a in _context.DemoTables
                 select new
                 {
                     a.Id,
                     a.Name,
                     a.Price,
                     a.Quantity,
                     a.Status
                 });

        //SEARCHING...
        if (!string.IsNullOrEmpty(nameFilter))
        {
            v = v.Where(a => a.Name.Contains(nameFilter));
        }
        if (!string.IsNullOrEmpty(priceFilter))
        {
            v = v.Where(a => a.Price.Contains(priceFilter));
        }
        if (!string.IsNullOrEmpty(statusFilter))
        {
            v = v.Where(a => a.Status.Contains(statusFilter));
        }

        if (!(string.IsNullOrEmpty(_sortBy) && string.IsNullOrEmpty(_sortOrder)))
        {
            v = v.OrderBy(_sortBy + " " + _sortOrder);
        }
        TotalRecords = v.Count();
        var displayedPosts = v.Skip(_startRow).Take(param.iDisplayLength).ToList();

        

        var addRowNumberOnResult = displayedPosts.Select((r, i) => new
        {
            SerialNumber = (_startRow + i + 1),
            r.Id,
            r.Name,
            r.Price,
            r.Quantity,
            r.Status
        });

        return Json(new
        {
            sEcho = param.sEcho,
            iTotalRecords = TotalRecords,
            iTotalDisplayRecords = TotalRecords,
            aaData = addRowNumberOnResult
        },
                    JsonRequestBehavior.AllowGet);
    }


    [HttpPost]
    public ActionResult GetTableData()
    {
        JsonResult result = new JsonResult();
        try
        {
            string search = Request.Form.GetValues("search[value]")[0];
            string draw = Request.Form.GetValues("draw")[0];
            string order = Request.Form.GetValues("order[0][column]")[0];
            string orderDir = Request.Form.GetValues("order[0][dir]")[0];

            var empName = Request.Form.GetValues("columns[1][name][value]")[0];
            var empName2 = Request.Form.GetValues("columns[2][name][value]")[0];
            var empName3 = Request.Form.GetValues("columns[3][name][value]")[0];

            int startRec = Convert.ToInt32(Request.Form.GetValues("start")[0]);
            int pageSize = Convert.ToInt32(Request.Form.GetValues("length")[0]);
            List<DemoTable> data = _context.DemoTables.ToList();
            int totalRecords = data.Count;
            if (!string.IsNullOrEmpty(search) &&
                !string.IsNullOrWhiteSpace(search))
            {
                data = data.Where(p => p.Id.ToString().ToLower().Contains(search.ToLower()) ||
                    p.Name.ToString().Contains(search.ToLower()) ||
                    p.Quantity.ToString().Contains(search.ToLower()) ||
                    p.Price.ToString().Contains(search.ToLower()) ||
                    p.Status.ToString().Contains(search.ToLower())
                 ).ToList();
            }
            if (!string.IsNullOrEmpty(empName))
            {
                data = data.Where(a => a.Name.ToString().ToLower().Contains(empName.ToLower())).ToList();
            }
            data = SortTableData(order, orderDir, data);

            int recFilter = data.Count;
            data = data.Skip(startRec).Take(pageSize).ToList();
            var modifiedData = data.Select(d =>
                new
                {
                    d.Id,
                    d.Name,
                    d.Quantity,
                    d.Price,
                    d.Status
                }
                );
            result = this.Json(new
            {
                draw = Convert.ToInt32(draw),
                recordsTotal = totalRecords,
                recordsFiltered = recFilter,
                data = modifiedData
            }, JsonRequestBehavior.AllowGet);
        }
        catch (Exception ex)
        {
            Console.Write(ex);
        }
        return result;
    }
    private List<DemoTable> SortTableData(string order, string orderDir, List<DemoTable> data)
    {
        List<DemoTable> lst = new List<DemoTable>();
        try
        {
            switch (order)
            {
                case "0":
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Id).ToList()
                                                                                             : data.OrderBy(p => p.Id).ToList();
                    break;
                case "1":
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Name).ToList()
                                                                                             : data.OrderBy(p => p.Name).ToList();
                    break;
                case "2":
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Quantity).ToList()
                                                                                             : data.OrderBy(p => p.Quantity).ToList();
                    break;
                case "3":
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Price).ToList()
                                                                                             : data.OrderBy(p => p.Price).ToList();
                    break;
                case "4":
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Status).ToList()
                                                                                               : data.OrderBy(p => p.Status).ToList();
                    break;
                default:
                    lst = orderDir.Equals("DESC", StringComparison.CurrentCultureIgnoreCase) ? data.OrderByDescending(p => p.Id).ToList()
                                                                                             : data.OrderBy(p => p.Id).ToList();
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.Write(ex);
        }
        return lst;
    }

}